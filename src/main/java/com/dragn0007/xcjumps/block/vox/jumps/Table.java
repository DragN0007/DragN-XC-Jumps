package com.dragn0007.xcjumps.block.vox.jumps;

import com.dragn0007.xcjumps.block.rot.DecorRotator;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.phys.shapes.BooleanOp;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

import java.util.stream.Stream;

public class Table extends DecorRotator {

    public Table() {
        super(NORTH, EAST, SOUTH, WEST);
    }

    public static final VoxelShape NORTH = Stream.of(
            Block.box(-13.780000000000001, 0.020000000000000212, 5.58, -8.939999999999998, 21.799999999999997, 10.42),
            Block.box(24.939999999999998, 0.020000000000000212, 5.58, 29.78, 21.799999999999997, 10.42),
            Block.box(-14.989999999999998, 19.379999999999995, 4.37, 30.99, 25.429999999999996, 11.629999999999999),
            Block.box(-14.989999999999998, 19.379999999999995, -10.629999999999999, 30.99, 25.429999999999996, -3.370000000000001),
            Block.box(-14.989999999999998, 19.379999999999995, 19.37, 30.99, 25.429999999999996, 26.63),
            Block.box(-13.989999999999998, 21.379999999999995, -10, 29.99, 23.429999999999996, 26)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape EAST = Stream.of(
            Block.box(5.58, 0.020000000000000212, -13.780000000000001, 10.42, 21.799999999999997, -8.939999999999998),
            Block.box(5.58, 0.020000000000000212, 24.939999999999998, 10.42, 21.799999999999997, 29.78),
            Block.box(4.370000000000001, 19.379999999999995, -14.989999999999998, 11.629999999999999, 25.429999999999996, 30.99),
            Block.box(19.37, 19.379999999999995, -14.989999999999998, 26.63, 25.429999999999996, 30.99),
            Block.box(-10.629999999999999, 19.379999999999995, -14.989999999999998, -3.370000000000001, 25.429999999999996, 30.99),
            Block.box(-10, 21.379999999999995, -13.989999999999998, 26, 23.429999999999996, 29.99)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape SOUTH = Stream.of(
            Block.box(-13.780000000000001, 0.020000000000000212, 5.58, -8.939999999999998, 21.799999999999997, 10.42),
            Block.box(24.939999999999998, 0.020000000000000212, 5.58, 29.78, 21.799999999999997, 10.42),
            Block.box(-14.989999999999998, 19.379999999999995, 4.37, 30.99, 25.429999999999996, 11.629999999999999),
            Block.box(-14.989999999999998, 19.379999999999995, -10.629999999999999, 30.99, 25.429999999999996, -3.370000000000001),
            Block.box(-14.989999999999998, 19.379999999999995, 19.37, 30.99, 25.429999999999996, 26.63),
            Block.box(-13.989999999999998, 21.379999999999995, -10, 29.99, 23.429999999999996, 26)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape WEST = Stream.of(
            Block.box(5.58, 0.020000000000000212, -13.780000000000001, 10.42, 21.799999999999997, -8.939999999999998),
            Block.box(5.58, 0.020000000000000212, 24.939999999999998, 10.42, 21.799999999999997, 29.78),
            Block.box(4.370000000000001, 19.379999999999995, -14.989999999999998, 11.629999999999999, 25.429999999999996, 30.99),
            Block.box(19.37, 19.379999999999995, -14.989999999999998, 26.63, 25.429999999999996, 30.99),
            Block.box(-10.629999999999999, 19.379999999999995, -14.989999999999998, -3.370000000000001, 25.429999999999996, 30.99),
            Block.box(-10, 21.379999999999995, -13.989999999999998, 26, 23.429999999999996, 29.99)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();


}
