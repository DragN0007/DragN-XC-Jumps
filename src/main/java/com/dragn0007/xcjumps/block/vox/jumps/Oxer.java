package com.dragn0007.xcjumps.block.vox.jumps;

import com.dragn0007.xcjumps.block.rot.DecorRotator;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.phys.shapes.BooleanOp;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

import java.util.stream.Stream;

public class Oxer extends DecorRotator {

    public Oxer() {
        super(NORTH, EAST, SOUTH, WEST);
    }

    public static final VoxelShape NORTH = Stream.of(
            Block.box(-13.780000000000001, 0.020000000000000212, -4.920000000000002, -8.939999999999998, 21.799999999999997, -0.08000000000000013),
            Block.box(-14.989999999999998, 19.379999999999995, 14.869999999999997, 30.99, 25.429999999999996, 22.13),
            Block.box(24.939999999999998, 0.020000000000000212, 16.08, 29.78, 21.799999999999997, 20.92),
            Block.box(-13.780000000000001, 0.020000000000000212, 16.08, -8.939999999999998, 21.799999999999997, 20.92),
            Block.box(24.939999999999998, 0.020000000000000212, -4.920000000000002, 29.78, 21.799999999999997, -0.08000000000000013),
            Block.box(-14.989999999999998, 19.379999999999995, -6.130000000000002, 30.99, 25.429999999999996, 1.129999999999999)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape EAST = Stream.of(
            Block.box(16.08, 0.020000000000000212, -13.780000000000001, 20.92, 21.799999999999997, -8.939999999999998),
            Block.box(-6.129999999999999, 19.379999999999995, -14.989999999999998, 1.1300000000000017, 25.429999999999996, 30.99),
            Block.box(-4.920000000000002, 0.020000000000000212, 24.939999999999998, -0.0799999999999983, 21.799999999999997, 29.78),
            Block.box(-4.920000000000002, 0.020000000000000212, -13.780000000000001, -0.0799999999999983, 21.799999999999997, -8.939999999999998),
            Block.box(16.08, 0.020000000000000212, 24.939999999999998, 20.92, 21.799999999999997, 29.78),
            Block.box(14.870000000000001, 19.379999999999995, -14.989999999999998, 22.130000000000003, 25.429999999999996, 30.99)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape SOUTH = Stream.of(
            Block.box(-13.780000000000001, 0.020000000000000212, -4.920000000000002, -8.939999999999998, 21.799999999999997, -0.08000000000000013),
            Block.box(-14.989999999999998, 19.379999999999995, 14.869999999999997, 30.99, 25.429999999999996, 22.13),
            Block.box(24.939999999999998, 0.020000000000000212, 16.08, 29.78, 21.799999999999997, 20.92),
            Block.box(-13.780000000000001, 0.020000000000000212, 16.08, -8.939999999999998, 21.799999999999997, 20.92),
            Block.box(24.939999999999998, 0.020000000000000212, -4.920000000000002, 29.78, 21.799999999999997, -0.08000000000000013),
            Block.box(-14.989999999999998, 19.379999999999995, -6.130000000000002, 30.99, 25.429999999999996, 1.129999999999999)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape WEST = Stream.of(
            Block.box(16.08, 0.020000000000000212, -13.780000000000001, 20.92, 21.799999999999997, -8.939999999999998),
            Block.box(-6.129999999999999, 19.379999999999995, -14.989999999999998, 1.1300000000000017, 25.429999999999996, 30.99),
            Block.box(-4.920000000000002, 0.020000000000000212, 24.939999999999998, -0.0799999999999983, 21.799999999999997, 29.78),
            Block.box(-4.920000000000002, 0.020000000000000212, -13.780000000000001, -0.0799999999999983, 21.799999999999997, -8.939999999999998),
            Block.box(16.08, 0.020000000000000212, 24.939999999999998, 20.92, 21.799999999999997, 29.78),
            Block.box(14.870000000000001, 19.379999999999995, -14.989999999999998, 22.130000000000003, 25.429999999999996, 30.99)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();


}
